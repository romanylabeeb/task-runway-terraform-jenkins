---
AWSTemplateFormatVersion: "2010-09-09"
Description: A bucket for stacker to store CloudFormation templates
Parameters:
  VPCCIDR:
    Description: CIDR block for the VPC.
    Type: String
  VPCName:
    Description: VPCName the VPC.
    Type: String
  AvailabilityZoneSubNet1:
    Description: VPCName the VPC.
    Type: String
  PublicSubnetName1:
    Description: VPCName the VPC.
    Type: String
  PublicSubnet1CIDR:
    Description: VPCName the VPC.
    Type: String

  PrivateSubnetName1:
    Description: VPCName the VPC.
    Type: String
  PrivateSubnet1CIDR:
    Description: VPCName the VPC.
    Type: String
  AvailabilityZoneSubNet2:
    Description: VPCName the VPC.
    Type: String
  PublicSubnetName2:
    Description: VPCName the VPC.
    Type: String
  PublicSubnet2CIDR:
    Description: VPCName the VPC.
    Type: String
  PrivateSubnetName2:
    Description: VPCName the VPC.
    Type: String
  PrivateSubnet2CIDR:
    Description: VPCName the VPC.
    Type: String
  IGWName:
    Description: VPCName the VPC.
    Type: String

Resources:
  OurVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: Name
          Value: !Ref VPCName

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZoneSubNet1
      MapPublicIpOnLaunch: true
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName1

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Ref AvailabilityZoneSubNet1
      MapPublicIpOnLaunch: true
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnetName1

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZoneSubNet2
      MapPublicIpOnLaunch: true
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: !Ref PublicSubnetName2

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Ref AvailabilityZoneSubNet2
      MapPublicIpOnLaunch: true
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: !Ref PrivateSubnetName2

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: public-rt

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IGWName

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref OurVPC
      InternetGatewayId: !Ref IGW

  NatEIpAddress1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - NatEIpAddress1
        - AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: private-rt

  PrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  NatEIpAddress2:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGateway2:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt
        - NatEIpAddress2
        - AllocationId
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: private-rt

  PrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: Public Network ACL
        - Key: Application
          Value: !Ref "AWS::StackId"

  PublicInboundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  PublicInboundSSHNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "22"
        To: "22"

  PublicOutBoundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  PublicOutBoundHTTPSNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "443"
        To: "443"

  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref OurVPC
      Tags:
        - Key: Name
          Value: Private Network ACL
        - Key: Application
          Value: !Ref "AWS::StackId"

  PrivateInboundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  PrivateInboundSSHNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "22"
        To: "22"

  PrivateOutBoundHTTPNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  PrivateOutBoundHTTPSNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "443"
        To: "443"

  PrivateubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl

Outputs:
  VPC:
    Description: VPC
    Value: !Ref OurVPC
    
  PublicSubnet1:
    Description: Public Subnet1
    Value: !Ref PublicSubnet1
    
  PublicSubnet2:
    Description: Public Subnet2
    Value: !Ref PublicSubnet2
 
  PrivateSubnet1:
    Description: Private Subnet1
    Value: !Ref PrivateSubnet1
    
  PrivateSubnet2:
    Description: Private Subnet2
    Value: !Ref PrivateSubnet2
   


